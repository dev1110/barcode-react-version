{"version":3,"sources":["img/user.png","serviceWorker.js","EmployeeCard.js","EmpCardList.js","SearchBox.js","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","EmployeeCard","name","id","coffee","tea","cCost","tCost","total","className","src","userImg","alt","height","EmpCardList","employee","map","user","i","key","uid","cCups","tCups","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","employees","this","filteredEmps","filter","toLowerCase","includes","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2HAAAA,EAAOC,QAAU,IAA0B,kC,ghPCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6DCGSC,EAlBK,SAAC,GAA4C,IAA3CC,EAA0C,EAA1CA,KAAKC,EAAqC,EAArCA,GAAGC,EAAkC,EAAlCA,OAAOC,EAA2B,EAA3BA,IAAIC,EAAuB,EAAvBA,MAAMC,EAAiB,EAAjBA,MAAMC,EAAW,EAAXA,MACjD,OACE,yBAAKC,UAAU,uDACX,yBAAKC,IAAKC,IAASF,UAAU,WAAWG,IAAI,OAAOC,OAAO,UAC1D,6BACI,4BAAKV,GACL,4BAAKD,GACL,wCAAcE,GACd,qCAAWC,GACX,wCAAcC,GACd,wCAAcC,GACd,uCAAaC,MCYZM,EAvBI,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACjB,OACI,6BACGA,EAASC,KAAI,SAACC,EAAKC,GAClB,OACI,kBAAC,EAAD,CACIC,IAAOD,EACPf,GAAMY,EAASG,GAAGE,IAClBlB,KAAQa,EAASG,GAAGhB,KACpBE,OAASW,EAASG,GAAGG,MACrBhB,IAAMU,EAASG,GAAGI,MAClBhB,MAAQS,EAASG,GAAGZ,MACpBC,MAAQQ,EAASG,GAAGX,MACpBC,MAAQO,EAASG,GAAGV,a,OCAzBe,EAdG,SAAC,GAA+B,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aAC/B,OACE,yBAAKhB,UAAU,OACX,2BACIiB,KAAK,SACLjB,UAAU,gCACVP,KAAK,YACLyB,YAAY,kBACZC,SAAYH,MC4BTI,G,kBA/Bb,aAAc,IAAD,8BACX,+CAYFC,eAAe,SAACC,GACd,EAAKC,SAAS,CAACR,YAAaO,EAAME,OAAOC,SAZzC,EAAKC,MAAO,CACVC,UAAW,GACXZ,YAAa,IAJJ,E,iFAWXa,KAAKL,SAAS,CAACI,UAAUA,M,+BAKlB,IAAD,EAC0BC,KAAKF,MAA9BC,EADD,EACCA,UAAUZ,EADX,EACWA,YACXc,EAAcF,EAAUG,QAAO,SAAAxB,GACnC,OAAOA,EAASb,KAAKsC,cAAcC,SAASjB,EAAYgB,kBAE1D,OACE,yBAAK/B,UAAU,MACb,2DACA,kBAAC,EAAD,CAAWgB,aAAcY,KAAKP,iBAC9B,kBAAC,EAAD,CAAaf,SAAYuB,S,GA1BfI,cCClBC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SL0H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.25533241.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/user.4c8e6900.png\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport userImg from './img/user.png';\r\n\r\nconst EmployeeCard =({name,id,coffee,tea,cCost,tCost,total}) => {\r\n    return (\r\n      <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\" >\r\n          <img src={userImg} className=\"App-logo\" alt=\"User\" height=\"100hv\" />\r\n          <div>\r\n              <h4>{id}</h4>\r\n              <h3>{name}</h3>\r\n              <h5>Coffee = {coffee}</h5>\r\n              <h5>Tea = {tea}</h5>\r\n              <h5>C-Cost = {cCost}</h5>\r\n              <h5>T-Cost = {tCost}</h5>\r\n              <h5>Total = {total}</h5>\r\n          </div>\r\n          \r\n      </div>\r\n    );\r\n}\r\n\r\nexport default EmployeeCard;","import React from 'react';\r\nimport EmployeeCard from './EmployeeCard';\r\n\r\nconst EmpCardList =({employee}) => {\r\n    return (\r\n        <div>\r\n          {employee.map((user,i)=>{\r\n            return(\r\n                <EmployeeCard \r\n                    key = {i} \r\n                    id = {employee[i].uid} \r\n                    name = {employee[i].name}\r\n                    coffee ={employee[i].cCups}\r\n                    tea ={employee[i].tCups}\r\n                    cCost ={employee[i].cCost}\r\n                    tCost ={employee[i].tCost}\r\n                    total ={employee[i].total}\r\n\r\n                /> \r\n              )\r\n            })\r\n           }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EmpCardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) =>{\r\n  return(\r\n    <div className=\"pa2\">\r\n        <input \r\n            type=\"search\" \r\n            className=\"pa3 ba b--green bg-light-blue\" \r\n            name=\"searchbox\" \r\n            placeholder=\"Search Employee\"\r\n            onChange = {searchChange}\r\n        />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from 'react';\r\nimport EmpCardList from './EmpCardList';\r\nimport employees from './api/employees.json';\r\nimport SearchBox from './SearchBox';\r\nimport './css/App.css';\r\n\r\nclass App extends Component{\r\n  constructor(){\r\n    super();\r\n    this.state ={\r\n      employees: [],\r\n      searchfield: ''\r\n    }\r\n  }\r\n  componentDidMount(){\r\n    // fetch('http://localhost/webAppPlus11222018/barcode-react-version/src/api/emp/read.php')\r\n    // .then(response => response.json())\r\n    // .then(users => { this.setState({employees:users}) });.\r\n    this.setState({employees:employees});\r\n  }\r\n  onSearchChange=(event)=>{\r\n    this.setState({searchfield: event.target.value });\r\n  }\r\n  render(){\r\n    const {employees,searchfield} = this.state;\r\n    const filteredEmps= employees.filter(employee=>{\r\n      return employee.name.toLowerCase().includes(searchfield.toLowerCase());\r\n    })\r\n    return(\r\n      <div className=\"tc\">\r\n        <h1>Barcode App | React Version</h1>\r\n        <SearchBox searchChange={this.onSearchChange}/>\r\n        <EmpCardList employee = {filteredEmps}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}